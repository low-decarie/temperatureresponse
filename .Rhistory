roots_50<-rootSolve::multiroot(f_equ_50,c(tmin=min(temp), tmax=max(temp)))
T50min <- roots_50$root[1]
T50max <- roots_50$root[2]
Tbr <- T50max-T50min
predicted <- predict(fit)
rising <- data.frame(temp=temp[temp<topt],
predicted=predicted[temp<topt])
rising
falling <- data.frame(temp=temp[temp>topt],
predicted=predicted[temp>topt])
falling
predicted <- predict(fit, newdata=data.frame(temp=(topt-10):(topt+10)))
rising <- data.frame(temp=temp[temp<topt],
predicted=predicted[temp<topt])
predicted
newdata_for_pred <- data.frame(temp=(topt-10):(topt+10))
rising_t <- data.frame(temp=(topt-10):topt)
rising <- data.frame(temp=newdata_for_pred,
predicted=predict(fit, newdata=rising_t))
rising_t
predict(fit, newdata=rising_t)
nrow(predict(fit, newdata=rising_t))
length(predict(fit, newdata=rising_t))
length((topt-10))
pred_fit <- function(x)predict(fit, newdata=data.frame(temp=x))
derivative <- numDeriv::grad(pred_fit, temp)
derivative
derivative[derivative>0
plot(derivative)
plot(temp,predict(fit))
tryCatch({;ljk;afsdj;},error=function(e){print("Testing")})
tryCatch({1==1},error=function(e){print("Testing")})
tryCatch({activation <- mean(derivative[derivative>0])},
error=function(e){activation <- NA})
activation
tryCatch({activation <- mean(derivative[derivative>0])},
error=function(e){activation <- NA})
tryCatch({deactivation <- mean(derivative[derivative<0])},
error=function(e){deactivation <- NA})
skewness
tryCatch({activation <- mean(derivative[derivative>0])},
error=function(e){activation <- NA})
tryCatch({deactivation <- mean(derivative[derivative<0])},
error=function(e){deactivation <- NA})
tryCatch({skewness <- abs(activation)-abs(deactivation)},
error=function(e){skewness <- NA})
skewness
library(temperatureresponse)
require(devtools)
require(devtools)
install_url("https://www.dropbox.com/s/l3h95mk2f9svh8p/temperatureresponse_0.1.tgz?dl=0")
require(devtools)
install.packages("/Users/LowDecarie/Dropbox/temperature_response/clean_package/temperatureresponse_0.1.tar.gz", repos = NULL, type="source")
??muscle
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
??oligonucleotideFrequency
??muscle
require(muscle)
aln <- muscle(stringset = umax)
str(aln)
aln
x0 <- c("#TTGA", "#-CTC-N")
x1 <- DNAStringSet(x0, start=2)
x1
names(x1)
names(x1)[2] <- "seqB"
x1
library(drosophila2probe)
x2 <- DNAStringSet(drosophila2probe$sequence)
require(Biostrings)
x0 <- c("#TTGA", "#-CTC-N")
x1 <- DNAStringSet(x0, start=2)
x1
names(x1)
names(x1)[2] <- "seqB"
x1
library(drosophila2probe)
x2 <- DNAStringSet(drosophila2probe$sequence)
require(drosophila2probe)
DNAStr = as(aln, "DNAStringSet")
DNAStr
str(DNAStr)
test <- as.data.frame(DNAStr)
head(test)
View(test)
require(stringr)
help(package="stringr")
str_split("ATGAGCGATAA---ATCGAGGTGGAGAGCGACG", pattern="[A-Z\\-]")
str_split("ATGAGCGATAA---ATCGAGGTGGAGAGCGACG", pattern="[A-Z]")
install.packages("ibdreg")
require(ibdreg)
sr.strsplit("ATGAGCGATAA---ATCGAGGTGGAGAGCGACG")
?sr.strsplit
require(tidyr)
help(package="tidyr")
names(DNA.data.frame)
aln <- muscle(stringset = umax)
DNAStr = as(aln, "DNAStringSet")
DNA.data.frame <- as.data.frame(DNAStr)
names(DNA.data.frame)
seq(1,nchar(x),2)
?substring
x <- "ATGAGCGATAA---ATCGAGGTGGAGAGCGACG"
substr(x, 1:nchar(x),1:nchar(x))
1:nchar(x)
substr(x, 1:nchar(x),2:nchar(x))
substr(x, 1:nchar(x),1:nchar(x))
strsplit(gsub("([[:alnum:]]{2})", "\\1 ", x), " ")[[1]]
strsplit(gsub("([[:alnum:]]{1})", "\\1 ", x), " ")[[1]]
strsplit(gsub("([[:alnum:-]]{1})", "\\1 ", x), " ")[[1]]
strsplit(gsub("([[:alnum:\\-]]{1})", "\\1 ", x), " ")[[1]]
strsplit(gsub("([[:alnum:\-]]{1})", "\\1 ", x), " ")[[1]]
strsplit(gsub("([[:alnum:]]{1}|-)", "\\1 ", x), " ")[[1]]
strsplit(gsub("([[:alnum:]]|-)", "\\1 ", x), " ")[[1]]
gsub("([[:alnum:]]|-)", "\\1 ", x)
strsplit(gsub("([[:alnum:]]|-)", "\\1 ", x), " ")
strsplit(gsub("([[:alnum:]]|-)", "\\1 ", DNA.data.frame$x), " ")
aln <- muscle(stringset = umax)
DNAStr = as(aln, "DNAStringSet")
DNA.data.frame <- as.data.frame(DNAStr)
ncar(DNA.data.frame$x[1])
nchar(DNA.data.frame$x[1])
DNA.data.frame <- extract(DNA.data.frame, x, regex="([[:alnum:]]|-)", into=paste0("a",1:nchar(DNA.data.frame$x[1])))
df <- data.frame(x = c(NA, "a-b", "a-d", "b-c", "d-e"))
df %>% extract(x, "A")
df %>% extract(x, c("A", "B"), "([[:alnum:]]+)-([[:alnum:]]+)")
DNA.data.frame
extract(DNA.data.frame, x, regex="([[:alnum:]]|-)", into=paste0("a",1:nchar(DNA.data.frame$x[1])))
paste0("a",1:nchar(DNA.data.frame$x[1]))
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
df %>% separate(x, c("A", "B"))
aln <- muscle(stringset = umax)
DNAStr = as(aln, "DNAStringSet")
DNA.data.frame <- as.data.frame(DNAStr)
DNA.data.frame$x <- gsub("([[:alnum:]]|-)", "\\1 ", DNA.data.frame$x)
DNA.data.frame <- seperate(DNA.data.frame, x, regex="([[:alnum:]]|-)", into=paste0("a",1:nchar(DNA.data.frame$x[1])))
aln <- muscle(stringset = umax)
DNAStr = as(aln, "DNAStringSet")
DNA.data.frame <- as.data.frame(DNAStr)
DNA.data.frame$x <- gsub("([[:alnum:]]|-)", "\\1 ", DNA.data.frame$x)
DNA.data.frame <- separate(DNA.data.frame, x, regex="([[:alnum:]]|-)", into=paste0("a",1:nchar(DNA.data.frame$x[1])))
View(DNA.data.frame)
aln <- muscle(stringset = umax)
DNAStr = as(aln, "DNAStringSet")
DNA.data.frame <- as.data.frame(DNAStr)
DNA.data.frame$x <- gsub("([[:alnum:]]|-)", "\\1 ", DNA.data.frame$x)
DNA.data.frame <- separate(DNA.data.frame, x, regex="([[:alnum:]]|-)", into=paste0("a",1:nchar(DNA.data.frame$x[1])), sep=" ")
aln <- muscle(stringset = umax)
DNAStr = as(aln, "DNAStringSet")
DNA.data.frame <- as.data.frame(DNAStr)
DNA.data.frame$x <- gsub("([[:alnum:]]|-)", "\\1 ", DNA.data.frame$x)
DNA.data.frame <- separate(DNA.data.frame,
x,
into=paste0("a",1:nchar(DNA.data.frame$x[1])),
sep=" ")
head(DNA.data.frame)
aln <- muscle(stringset = umax)
DNAStr = as(aln, "DNAStringSet")
DNA.data.frame <- as.data.frame(DNAStr)
string_length <- nchar(DNA.data.frame$x[1])
DNA.data.frame$x <- gsub("([[:alnum:]]|-)",
"\\1 ",
DNA.data.frame$x)
DNA.data.frame <- separate(DNA.data.frame,
x,
into=paste0("a",1:string_length),
sep=" ")
string_length
DNA.data.frame$x[1]
DNA.data.frame$x[1]
aln <- muscle(stringset = umax)
DNAStr = as(aln, "DNAStringSet")
DNA.data.frame <- as.data.frame(DNAStr)
DNA.data.frame$x[1]
nchar(DNA.data.frame$x[1])
DNA.data.frame$x <- gsub("([[:alnum:]]|-)",
"\\1 ",
DNA.data.frame$x)
nchar(DNA.data.frame$x[1])
paste0("a",1:string_length)
DNA.data.frame <- separate(DNA.data.frame,
x,
into=paste0("a",1:string_length),
sep=" ")
View(DNA.data.frame)
head(DNA.data.frame)
??multiroot
?minpack.lm::nlsLM
x <- 1:10
y <- 2*x + 3
## Not run:
nls(y ~ a + b * x, start = list(a = 0.12345, b = 0.54321))
## End(Not run)
nlsLM(y ~ a + b * x, start = list(a = 0.12345, b = 0.54321))
minpack.lm::nlsLM(y ~ a + b * x, start = list(a = 0.12345, b = 0.54321))
test <- minpack.lm::nlsLM(y ~ a + b * x, start = list(a = 0.12345, b = 0.54321))
require(broom)
augment(test)
test
str(test)
?augment
?predict.nls
augment(test, se.fit=T)
?nlsLM
predict(test)
predict(test, se.fit = T)
?nls
require(graphics)
DNase1 <- subset(DNase, Run == 1)
## using a selfStart model
fm1DNase1 <- nls(density ~ SSlogis(log(conc), Asym, xmid, scal), DNase1)
summary(fm1DNase1)
predict(fm1DNase1)
augment(fm1DNase1)
predict(fm1DNase1, se.fit = T)
library(nls2)
install.packages("nls2")
?nls
test
as.lm(test)
require(nls2)
as.lm(test)
?as.lm
??as.lm
predictNLS <- function(
object,
newdata,
level = 0.95,
nsim = 10000,
...
)
{
require(MASS, quietly = TRUE)
## get right-hand side of formula
RHS <- as.list(object$call$formula)[[3]]
EXPR <- as.expression(RHS)
## all variables in model
VARS <- all.vars(EXPR)
## coefficients
COEF <- coef(object)
## extract predictor variable
predNAME <- setdiff(VARS, names(COEF))
## take fitted values, if 'newdata' is missing
if (missing(newdata)) {
newdata <- eval(object$data)[predNAME]
colnames(newdata) <- predNAME
}
## check that 'newdata' has same name as predVAR
if (names(newdata)[1] != predNAME) stop("newdata should have name '", predNAME, "'!")
## get parameter coefficients
COEF <- coef(object)
## get variance-covariance matrix
VCOV <- vcov(object)
## augment variance-covariance matrix for 'mvrnorm'
## by adding a column/row for 'error in x'
NCOL <- ncol(VCOV)
ADD1 <- c(rep(0, NCOL))
ADD1 <- matrix(ADD1, ncol = 1)
colnames(ADD1) <- predNAME
VCOV <- cbind(VCOV, ADD1)
ADD2 <- c(rep(0, NCOL + 1))
ADD2 <- matrix(ADD2, nrow = 1)
rownames(ADD2) <- predNAME
VCOV <- rbind(VCOV, ADD2)
## iterate over all entries in 'newdata' as in usual 'predict.' functions
NR <- nrow(newdata)
respVEC <- numeric(NR)
seVEC <- numeric(NR)
varPLACE <- ncol(VCOV)
## define counter function
counter <- function (i)
{
if (i%%10 == 0)
cat(i)
else cat(".")
if (i%%50 == 0)
cat("\n")
flush.console()
}
outMAT <- NULL
for (i in 1:NR) {
counter(i)
## get predictor values and optional errors
predVAL <- newdata[i, 1]
if (ncol(newdata) == 2) predERROR <- newdata[i, 2] else predERROR <- 0
names(predVAL) <- predNAME
names(predERROR) <- predNAME
## create mean vector for 'mvrnorm'
MU <- c(COEF, predVAL)
## create variance-covariance matrix for 'mvrnorm'
## by putting error^2 in lower-right position of VCOV
newVCOV <- VCOV
newVCOV[varPLACE, varPLACE] <- predERROR^2
## create MC simulation matrix
simMAT <- mvrnorm(n = nsim, mu = MU, Sigma = newVCOV, empirical = TRUE)
## evaluate expression on rows of simMAT
EVAL <- try(eval(EXPR, envir = as.data.frame(simMAT)), silent = TRUE)
if (inherits(EVAL, "try-error")) stop("There was an error evaluating the simulations!")
## collect statistics
PRED <- data.frame(predVAL)
colnames(PRED) <- predNAME
FITTED <- predict(object, newdata = data.frame(PRED))
MEAN.sim <- mean(EVAL, na.rm = TRUE)
SD.sim <- sd(EVAL, na.rm = TRUE)
MEDIAN.sim <- median(EVAL, na.rm = TRUE)
MAD.sim <- mad(EVAL, na.rm = TRUE)
QUANT <- quantile(EVAL, c((1 - level)/2, level + (1 - level)/2))
RES <- c(FITTED, MEAN.sim, SD.sim, MEDIAN.sim, MAD.sim, QUANT[1], QUANT[2])
outMAT <- rbind(outMAT, RES)
}
colnames(outMAT) <- c("fit", "mean", "sd", "median", "mad", names(QUANT[1]), names(QUANT[2]))
rownames(outMAT) <- NULL
cat("\n")
return(outMAT)
}
predictNLS(test)
?test
type(test)
class(test)
?nls
predictNLS(fm1DNase1)
predictNLS(fm1DNase1, newdata = data.frame(conc = 5))
predictNLS(fm1DNase1, newdata = data.frame(conc = 1:10))
library(temperatureresponse)
library(temperatureresponse)
library(temperatureresponse)
library(temperatureresponse)
predictNLS <- function(
object,
newdata,
level = 0.95,
nsim = 10000,
...
)
{
# require(MASS, quietly = TRUE)
R<-8.617343e-5
pi <- pi
## get right-hand side of formula
RHS <- as.list(object$call$formula)[[3]]
EXPR <- as.expression(RHS)
## all variables in model
VARS <- all.vars(EXPR)
## coefficients
COEF <- coef(object)
## extract predictor variable
# predNAME <- setdiff(VARS, names(COEF))
predNAME <- "temp"
## take fitted values, if 'newdata' is missing
if (missing(newdata)) {
newdata <- eval(object$data)[predNAME]
colnames(newdata) <- predNAME
}
## check that 'newdata' has same name as predVAR
if (names(newdata)[1] != predNAME) stop("newdata should have name '", predNAME, "'!")
## get parameter coefficients
COEF <- coef(object)
## get variance-covariance matrix
VCOV <- vcov(object)
## augment variance-covariance matrix for 'mvrnorm'
## by adding a column/row for 'error in x'
NCOL <- ncol(VCOV)
ADD1 <- c(rep(0, NCOL))
ADD1 <- matrix(ADD1, ncol = 1)
colnames(ADD1) <- predNAME
VCOV <- cbind(VCOV, ADD1)
ADD2 <- c(rep(0, NCOL + 1))
ADD2 <- matrix(ADD2, nrow = 1)
rownames(ADD2) <- predNAME
VCOV <- rbind(VCOV, ADD2)
## iterate over all entries in 'newdata' as in usual 'predict.' functions
NR <- nrow(newdata)
respVEC <- numeric(NR)
seVEC <- numeric(NR)
varPLACE <- ncol(VCOV)
## define counter function
counter <- function (i)
{
if (i%%10 == 0)
cat(i)
else cat(".")
if (i%%50 == 0)
cat("\n")
flush.console()
}
outMAT <- NULL
for (i in 1:NR) {
counter(i)
## get predictor values and optional errors
predVAL <- newdata[i, 1]
if (ncol(newdata) == 2) predERROR <- newdata[i, 2] else predERROR <- 0
names(predVAL) <- predNAME
names(predERROR) <- predNAME
## create mean vector for 'mvrnorm'
MU <- c(COEF, predVAL)
## create variance-covariance matrix for 'mvrnorm'
## by putting error^2 in lower-right position of VCOV
newVCOV <- VCOV
newVCOV[varPLACE, varPLACE] <- predERROR^2
## create MC simulation matrix
simMAT <- mvrnorm(n = nsim, mu = MU, Sigma = newVCOV, empirical = TRUE)
## evaluate expression on rows of simMAT
EVAL <- try(eval(EXPR, envir = as.data.frame(simMAT)), silent = TRUE)
if (inherits(EVAL, "try-error")) stop("There was an error evaluating the simulations!")
## collect statistics
PRED <- data.frame(predVAL)
colnames(PRED) <- predNAME
FITTED <- predict(object, newdata = data.frame(PRED))
MEAN.sim <- mean(EVAL, na.rm = TRUE)
SD.sim <- sd(EVAL, na.rm = TRUE)
MEDIAN.sim <- median(EVAL, na.rm = TRUE)
MAD.sim <- mad(EVAL, na.rm = TRUE)
QUANT <- quantile(EVAL, c((1 - level)/2, level + (1 - level)/2), na.rm = TRUE)
RES <- c(FITTED, MEAN.sim, SD.sim, MEDIAN.sim, MAD.sim, QUANT[1], QUANT[2])
outMAT <- rbind(outMAT, RES)
}
colnames(outMAT) <- c("fit", "mean", "sd", "median", "mad", names(QUANT[1]), names(QUANT[2]))
rownames(outMAT) <- NULL
cat("\n")
outMAT <- data.frame(outMAT)
outMAT$temp <- newdata$temp
return(outMAT)
}
library(temperatureresponse)
library(temperatureresponse)
library(temperatureresponse)
Emiliania_huxleyi <- read.csv("./data/Emiliania_huxleyi.csv")
save(Emiliania_huxleyi, "./data/Emiliania_huxleyi.RData")
save(Emiliania_huxleyi,file="./data/Emiliania_huxleyi.RData")
head(Emiliania_huxleyi)
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate))
fitmodellist <- function(temp,rate, augment=F,return_fit=F, models=paste0("equ",4:16)){
output <- do.call(dplyr::bind_rows,
lapply(models,
do.call,
list(temp=temp,
rate=rate,
augment=augment,
return_fit=return_fit)))
return(output)
}
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate))
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate))
library(temperatureresponse)
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate))
#' Fit model list
#'
#' @description Fits list of models (all models in package by default)
#'
#' @param temp temperature (in Celsius)
#' @param rate rate measurement (for example growth rate, but could also be abundance)
#' @param augment logical wether the dataset with fits should be returned instead of the parameter values
#'
#' @return a data frame of, depending on augment argument, if FALSE, parameters, if TRUE, data with predicted values
#' @export
#'
#' @example output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate))
fitmodellist <- function(temp,rate, augment=F,return_fit=F, models=paste0("equ",4:15)){
output <- do.call(dplyr::bind_rows,
lapply(models,
do.call,
list(temp=temp,
rate=rate,
augment=augment,
return_fit=return_fit)))
return(output)
}
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate))
f_equ= function(t){a*((b^t)*exp(-c*((t-tnaught)^d)-e))}
library(temperatureresponse)
library(temperatureresponse)
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate))
#' Fit model list
#'
#' @description Fits list of models (all models in package by default)
#'
#' @param temp temperature (in Celsius)
#' @param rate rate measurement (for example growth rate, but could also be abundance)
#' @param augment logical wether the dataset with fits should be returned instead of the parameter values
#'
#' @return a data frame of, depending on augment argument, if FALSE, parameters, if TRUE, data with predicted values
#' @export
#'
#'
fitmodellist <- function(temp,rate, augment=F,return_fit=F, models=paste0("equ",4:16)){
output <- do.call(dplyr::bind_rows,
lapply(models,
do.call,
list(temp=temp,
rate=rate,
augment=augment,
return_fit=return_fit)))
return(output)
}
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate))
library(temperatureresponse)
?augment
??augment
library(temperatureresponse)
library(temperatureresponse)
library(temperatureresponse)
str(Emiliania_huxleyi)
library(temperatureresponse)
library(temperatureresponse)
head(Emiliania_huxleyi)
Emiliania_huxleyi <- Emiliania_huxleyi[,names(Emiliania_huxleyi) %in% c("temp","rate")]
Emiliania_huxleyi
save(Emiliania_huxleyi, file="./data/Emiliania_huxleyi.RData")
Emiliania_huxleyi <- Emiliania_huxleyi[rate>0,]
Emiliania_huxleyi <- Emiliania_huxleyi[Emiliania_huxleyi$rate>0,]
save(Emiliania_huxleyi, file="./data/Emiliania_huxleyi.RData")
