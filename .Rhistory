summary(fm1DNase1)
predict(fm1DNase1)
augment(fm1DNase1)
predict(fm1DNase1, se.fit = T)
library(nls2)
install.packages("nls2")
?nls
test
as.lm(test)
require(nls2)
as.lm(test)
?as.lm
??as.lm
predictNLS <- function(
object,
newdata,
level = 0.95,
nsim = 10000,
...
)
{
require(MASS, quietly = TRUE)
## get right-hand side of formula
RHS <- as.list(object$call$formula)[[3]]
EXPR <- as.expression(RHS)
## all variables in model
VARS <- all.vars(EXPR)
## coefficients
COEF <- coef(object)
## extract predictor variable
predNAME <- setdiff(VARS, names(COEF))
## take fitted values, if 'newdata' is missing
if (missing(newdata)) {
newdata <- eval(object$data)[predNAME]
colnames(newdata) <- predNAME
}
## check that 'newdata' has same name as predVAR
if (names(newdata)[1] != predNAME) stop("newdata should have name '", predNAME, "'!")
## get parameter coefficients
COEF <- coef(object)
## get variance-covariance matrix
VCOV <- vcov(object)
## augment variance-covariance matrix for 'mvrnorm'
## by adding a column/row for 'error in x'
NCOL <- ncol(VCOV)
ADD1 <- c(rep(0, NCOL))
ADD1 <- matrix(ADD1, ncol = 1)
colnames(ADD1) <- predNAME
VCOV <- cbind(VCOV, ADD1)
ADD2 <- c(rep(0, NCOL + 1))
ADD2 <- matrix(ADD2, nrow = 1)
rownames(ADD2) <- predNAME
VCOV <- rbind(VCOV, ADD2)
## iterate over all entries in 'newdata' as in usual 'predict.' functions
NR <- nrow(newdata)
respVEC <- numeric(NR)
seVEC <- numeric(NR)
varPLACE <- ncol(VCOV)
## define counter function
counter <- function (i)
{
if (i%%10 == 0)
cat(i)
else cat(".")
if (i%%50 == 0)
cat("\n")
flush.console()
}
outMAT <- NULL
for (i in 1:NR) {
counter(i)
## get predictor values and optional errors
predVAL <- newdata[i, 1]
if (ncol(newdata) == 2) predERROR <- newdata[i, 2] else predERROR <- 0
names(predVAL) <- predNAME
names(predERROR) <- predNAME
## create mean vector for 'mvrnorm'
MU <- c(COEF, predVAL)
## create variance-covariance matrix for 'mvrnorm'
## by putting error^2 in lower-right position of VCOV
newVCOV <- VCOV
newVCOV[varPLACE, varPLACE] <- predERROR^2
## create MC simulation matrix
simMAT <- mvrnorm(n = nsim, mu = MU, Sigma = newVCOV, empirical = TRUE)
## evaluate expression on rows of simMAT
EVAL <- try(eval(EXPR, envir = as.data.frame(simMAT)), silent = TRUE)
if (inherits(EVAL, "try-error")) stop("There was an error evaluating the simulations!")
## collect statistics
PRED <- data.frame(predVAL)
colnames(PRED) <- predNAME
FITTED <- predict(object, newdata = data.frame(PRED))
MEAN.sim <- mean(EVAL, na.rm = TRUE)
SD.sim <- sd(EVAL, na.rm = TRUE)
MEDIAN.sim <- median(EVAL, na.rm = TRUE)
MAD.sim <- mad(EVAL, na.rm = TRUE)
QUANT <- quantile(EVAL, c((1 - level)/2, level + (1 - level)/2))
RES <- c(FITTED, MEAN.sim, SD.sim, MEDIAN.sim, MAD.sim, QUANT[1], QUANT[2])
outMAT <- rbind(outMAT, RES)
}
colnames(outMAT) <- c("fit", "mean", "sd", "median", "mad", names(QUANT[1]), names(QUANT[2]))
rownames(outMAT) <- NULL
cat("\n")
return(outMAT)
}
predictNLS(test)
?test
type(test)
class(test)
?nls
predictNLS(fm1DNase1)
predictNLS(fm1DNase1, newdata = data.frame(conc = 5))
predictNLS(fm1DNase1, newdata = data.frame(conc = 1:10))
library(temperatureresponse)
library(temperatureresponse)
library(temperatureresponse)
library(temperatureresponse)
predictNLS <- function(
object,
newdata,
level = 0.95,
nsim = 10000,
...
)
{
# require(MASS, quietly = TRUE)
R<-8.617343e-5
pi <- pi
## get right-hand side of formula
RHS <- as.list(object$call$formula)[[3]]
EXPR <- as.expression(RHS)
## all variables in model
VARS <- all.vars(EXPR)
## coefficients
COEF <- coef(object)
## extract predictor variable
# predNAME <- setdiff(VARS, names(COEF))
predNAME <- "temp"
## take fitted values, if 'newdata' is missing
if (missing(newdata)) {
newdata <- eval(object$data)[predNAME]
colnames(newdata) <- predNAME
}
## check that 'newdata' has same name as predVAR
if (names(newdata)[1] != predNAME) stop("newdata should have name '", predNAME, "'!")
## get parameter coefficients
COEF <- coef(object)
## get variance-covariance matrix
VCOV <- vcov(object)
## augment variance-covariance matrix for 'mvrnorm'
## by adding a column/row for 'error in x'
NCOL <- ncol(VCOV)
ADD1 <- c(rep(0, NCOL))
ADD1 <- matrix(ADD1, ncol = 1)
colnames(ADD1) <- predNAME
VCOV <- cbind(VCOV, ADD1)
ADD2 <- c(rep(0, NCOL + 1))
ADD2 <- matrix(ADD2, nrow = 1)
rownames(ADD2) <- predNAME
VCOV <- rbind(VCOV, ADD2)
## iterate over all entries in 'newdata' as in usual 'predict.' functions
NR <- nrow(newdata)
respVEC <- numeric(NR)
seVEC <- numeric(NR)
varPLACE <- ncol(VCOV)
## define counter function
counter <- function (i)
{
if (i%%10 == 0)
cat(i)
else cat(".")
if (i%%50 == 0)
cat("\n")
flush.console()
}
outMAT <- NULL
for (i in 1:NR) {
counter(i)
## get predictor values and optional errors
predVAL <- newdata[i, 1]
if (ncol(newdata) == 2) predERROR <- newdata[i, 2] else predERROR <- 0
names(predVAL) <- predNAME
names(predERROR) <- predNAME
## create mean vector for 'mvrnorm'
MU <- c(COEF, predVAL)
## create variance-covariance matrix for 'mvrnorm'
## by putting error^2 in lower-right position of VCOV
newVCOV <- VCOV
newVCOV[varPLACE, varPLACE] <- predERROR^2
## create MC simulation matrix
simMAT <- mvrnorm(n = nsim, mu = MU, Sigma = newVCOV, empirical = TRUE)
## evaluate expression on rows of simMAT
EVAL <- try(eval(EXPR, envir = as.data.frame(simMAT)), silent = TRUE)
if (inherits(EVAL, "try-error")) stop("There was an error evaluating the simulations!")
## collect statistics
PRED <- data.frame(predVAL)
colnames(PRED) <- predNAME
FITTED <- predict(object, newdata = data.frame(PRED))
MEAN.sim <- mean(EVAL, na.rm = TRUE)
SD.sim <- sd(EVAL, na.rm = TRUE)
MEDIAN.sim <- median(EVAL, na.rm = TRUE)
MAD.sim <- mad(EVAL, na.rm = TRUE)
QUANT <- quantile(EVAL, c((1 - level)/2, level + (1 - level)/2), na.rm = TRUE)
RES <- c(FITTED, MEAN.sim, SD.sim, MEDIAN.sim, MAD.sim, QUANT[1], QUANT[2])
outMAT <- rbind(outMAT, RES)
}
colnames(outMAT) <- c("fit", "mean", "sd", "median", "mad", names(QUANT[1]), names(QUANT[2]))
rownames(outMAT) <- NULL
cat("\n")
outMAT <- data.frame(outMAT)
outMAT$temp <- newdata$temp
return(outMAT)
}
library(temperatureresponse)
library(temperatureresponse)
library(temperatureresponse)
Emiliania_huxleyi <- read.csv("./data/Emiliania_huxleyi.csv")
save(Emiliania_huxleyi, "./data/Emiliania_huxleyi.RData")
save(Emiliania_huxleyi,file="./data/Emiliania_huxleyi.RData")
head(Emiliania_huxleyi)
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate))
fitmodellist <- function(temp,rate, augment=F,return_fit=F, models=paste0("equ",4:16)){
output <- do.call(dplyr::bind_rows,
lapply(models,
do.call,
list(temp=temp,
rate=rate,
augment=augment,
return_fit=return_fit)))
return(output)
}
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate))
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate))
library(temperatureresponse)
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate))
#' Fit model list
#'
#' @description Fits list of models (all models in package by default)
#'
#' @param temp temperature (in Celsius)
#' @param rate rate measurement (for example growth rate, but could also be abundance)
#' @param augment logical wether the dataset with fits should be returned instead of the parameter values
#'
#' @return a data frame of, depending on augment argument, if FALSE, parameters, if TRUE, data with predicted values
#' @export
#'
#' @example output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate))
fitmodellist <- function(temp,rate, augment=F,return_fit=F, models=paste0("equ",4:15)){
output <- do.call(dplyr::bind_rows,
lapply(models,
do.call,
list(temp=temp,
rate=rate,
augment=augment,
return_fit=return_fit)))
return(output)
}
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate))
f_equ= function(t){a*((b^t)*exp(-c*((t-tnaught)^d)-e))}
library(temperatureresponse)
library(temperatureresponse)
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate))
#' Fit model list
#'
#' @description Fits list of models (all models in package by default)
#'
#' @param temp temperature (in Celsius)
#' @param rate rate measurement (for example growth rate, but could also be abundance)
#' @param augment logical wether the dataset with fits should be returned instead of the parameter values
#'
#' @return a data frame of, depending on augment argument, if FALSE, parameters, if TRUE, data with predicted values
#' @export
#'
#'
fitmodellist <- function(temp,rate, augment=F,return_fit=F, models=paste0("equ",4:16)){
output <- do.call(dplyr::bind_rows,
lapply(models,
do.call,
list(temp=temp,
rate=rate,
augment=augment,
return_fit=return_fit)))
return(output)
}
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate))
library(temperatureresponse)
?augment
??augment
library(temperatureresponse)
library(temperatureresponse)
library(temperatureresponse)
str(Emiliania_huxleyi)
library(temperatureresponse)
library(temperatureresponse)
head(Emiliania_huxleyi)
Emiliania_huxleyi <- Emiliania_huxleyi[,names(Emiliania_huxleyi) %in% c("temp","rate")]
Emiliania_huxleyi
save(Emiliania_huxleyi, file="./data/Emiliania_huxleyi.RData")
Emiliania_huxleyi <- Emiliania_huxleyi[rate>0,]
Emiliania_huxleyi <- Emiliania_huxleyi[Emiliania_huxleyi$rate>0,]
save(Emiliania_huxleyi, file="./data/Emiliania_huxleyi.RData")
library(temperatureresponse)
library(temperatureresponse)
devtools::build_win()
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate))
library(temperatureresponse)
library(temperatureresponse)
devtools::build_win()
devtools::build_win()
help(package="temperatureresponse")
library(temperatureresponse)
library(temperatureresponse)
devtools::build_win()
library(temperatureresponse)
devtools::build_win()
library(temperatureresponse)
output <- with(Emiliania_huxleyi, equ16(temp=temp, rate=rate))
output
library(temperatureresponse)
require(devtools)
library(hexSticker)
require(temperatureresponse)
?fitmodellist
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate))
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate, augment=T))
head(output)
p <- qplot(data=output,x=temp, y=.fitted,colour=model)
require(ggplot2)
print(p)
library(hexSticker)
require(ggplot2)
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate, augment=T))
p <- qplot(data=output,x=temp, y=.fitted,colour=model)
print(p)
library(hexSticker)
require(ggplot2)
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate, augment=T))
p <- qplot(data=output,x=temp, y=.fitted,colour=model, geom="line")
print(p)
sticker(expression(plot(cars, cex=.5, cex.axis=.5, mgp=c(0,.3,0), xlab="", ylab="")),
package="hexSticker", p_size=8, s_x=1, s_y=.8, s_width=1.2, s_height=1,
filename="baseplot.png")
sticker(expression(print(p)),
package="temperatureresponse", p_size=8, s_x=1, s_y=.8, s_width=1.2, s_height=1,
filename="baseplot.png")
?sticker
sticker(expression(print(p)),
package="temperatureresponse", p_size=8, s_x=1, s_y=.8, s_width=0.2, s_height=0.2,
filename="baseplot.png")
print(p+theme(legend.position = "none")
)
sticker(expression(print(p+theme(legend.position = "none"))),
package="temperatureresponse", p_size=8, s_x=1, s_y=.8, s_width=0.2, s_height=0.2,
filename="baseplot.png")
sticker(expression(print(p+theme(legend.position = "none"))),
package="temperatureresponse", p_size=8, s_x=1, s_y=.8, s_width=0.5, s_height=0.5,
filename="baseplot.png")
sticker(expression(print(p+theme(legend.position = "none"))),
package="temperatureresponse", p_size=3, s_x=1, s_y=.8, s_width=0.5, s_height=0.5,
filename="baseplot.png")
sticker(expression(print(p+theme(legend.position = "none"))),
package="temperatureresponse", p_size=5, s_x=1, s_y=.8, s_width=0.6, s_height=0.6,
filename="baseplot.png")
library(hexSticker)
require(ggplot2)
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate, augment=T))
p <- qplot(data=output,x=temp, y=.fitted,colour=model, geom="line")
p <- p+theme(legend.position = "none", axis.title.y = element_blank()))
sticker(expression(print(p)),
package="temperatureresponse", p_size=5, s_x=1, s_y=.8, s_width=0.6, s_height=0.6,
filename="baseplot.png")
p <- p+theme(legend.position = "none", axis.title.y = element_blank())
sticker(expression(print(p)),
package="temperatureresponse", p_size=5, s_x=1, s_y=.8, s_width=0.6, s_height=0.6,
filename="baseplot.png")
library(hexSticker)
require(ggplot2)
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate, augment=T))
p <- qplot(data=output,x=temp, y=.fitted,colour=model, geom="line")
p <- p+theme(legend.position = "none", axis.title.y = element_blank())
sticker(expression(print(p)),
package="temperatureresponse",
p_size=4, s_x=1, s_y=.8, s_width=0.7, s_height=0.7,
filename="baseplot.png")
library(hexSticker)
require(ggplot2)
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate, augment=T))
p <- qplot(data=output,x=temp, y=.fitted,colour=model, geom="line")
p <- p+theme(legend.position = "none", axis.title.y = element_blank(), panel.background = element_rect(fill = "transparent"))
sticker(expression(print(p)),
package="temperatureresponse",
p_size=4, s_x=1, s_y=.8, s_width=0.7, s_height=0.7,
filename="baseplot.png")
library(hexSticker)
require(ggplot2)
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate, augment=T))
p <- qplot(data=output,x=temp, y=.fitted,colour=model, geom="line")
p <- p+theme(legend.position = "none", axis.title.y = element_blank(),
panel.background = element_rect(fill = "transparent",
plot.background = element_rect(fill = "transparent", col = NA)))
sticker(expression(print(p)),
package="temperatureresponse",
p_size=4, s_x=1, s_y=.8, s_width=0.7, s_height=0.7,
filename="baseplot.png")
p <- p+theme(legend.position = "none", axis.title.y = element_blank(),
panel.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent", col = NA))
sticker(expression(print(p)),
package="temperatureresponse",
p_size=4, s_x=1, s_y=.8, s_width=0.7, s_height=0.7,
filename="baseplot.png")
library(hexSticker)
require(ggplot2)
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate, augment=T))
p <- qplot(data=output,x=temp, y=.fitted,colour=model, geom="line")
p <- p+theme(legend.position = "none", axis.title.y = element_blank(),
panel.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent", col = NA))
sticker(expression(print(p)),
package="temperatureresponse",
p_size=4, s_x=1, s_y=.8, s_width=0.7, s_height=0.7,
filename="baseplot.png")
library(hexSticker)
require(ggplot2)
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate, augment=T))
p <- qplot(data=output,x=temp, y=.fitted,colour=model, geom="line")
p <- p+theme(legend.position = "none", axis.title.y = element_blank(),
plot.background = element_rect(fill = "transparent", col = NA))
sticker(expression(print(p)),
package="temperatureresponse",
p_size=4, s_x=1, s_y=.8, s_width=0.7, s_height=0.7,
filename="baseplot.png")
library(hexSticker)
require(ggplot2)
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate, augment=T))
p <- qplot(data=output,x=temp, y=.fitted,colour=model, geom="line")
p <- p+theme(legend.position = "none", axis.title.y = element_blank(),
rect = element_rect(fill = "transparent"))
sticker(expression(print(p)),
package="temperatureresponse",
p_size=4, s_x=1, s_y=.8, s_width=0.7, s_height=0.7,
filename="baseplot.png")
library(hexSticker)
require(ggplot2)
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate, augment=T))
p <- qplot(data=output,x=temp, y=.fitted,colour=model, geom="line")
p <- p+theme(legend.position = "none", axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
rect = element_rect(fill = "transparent"))
sticker(expression(print(p)),
package="temperatureresponse",
p_size=4, s_x=1, s_y=.8, s_width=0.7, s_height=0.7,
filename="baseplot.png")
library(hexSticker)
require(ggplot2)
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate, augment=T))
p <- qplot(data=output,x=temp, y=.fitted,colour=model, geom="line")
p <- p+theme(legend.position = "none", axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
rect = element_rect(fill = "transparent", size = 0))
sticker(expression(print(p)),
package="temperatureresponse",
p_size=4, s_x=1, s_y=.8, s_width=0.7, s_height=0.7,
filename="baseplot.png")
sticker(expression(print(p)),
package="temperatureresponse",
p_size=4, s_x=1, s_y=.8, s_width=1, s_height=1,
filename="baseplot.png")
sticker(expression(print(p)),
package="temperatureresponse",
p_size=4, s_x=1, s_y=.8, s_width=2, s_height=1,
filename="baseplot.png")
sticker(expression(print(p)),
package="temperatureresponse",
p_size=4, s_x=1, s_y=.8, s_width=1.2, s_height=1,
filename="baseplot.png")
sticker(expression(print(p)),
package="temperatureresponse",
p_size=4, s_x=1, s_y=.8, s_width=1.5, s_height=1,
filename="baseplot.png")
library(hexSticker)
require(ggplot2)
output <- with(Emiliania_huxleyi, fitmodellist(temp=temp, rate=rate, augment=T))
p <- qplot(data=output,x=temp, y=.fitted,colour=model, geom="line", alpha=I(0.5))
p <- p+theme(legend.position = "none", axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
rect = element_rect(fill = "transparent", size = 0))
sticker(expression(print(p)),
package="temperatureresponse",
p_size=4, s_x=1, s_y=.8, s_width=1.5, s_height=1,
filename="baseplot.png")
gg_color_hue(10)
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
n = 4
cols = gg_color_hue(10)
cols
sticker(expression(print(p)),
package="temperatureresponse",
p_size=4, s_x=1, s_y=.8, s_width=1.5, s_height=1,
filename="baseplot.png",
h_color="#A3A500", h_fill="#FF62BC")
sticker(expression(print(p)),
package="temperatureresponse",
p_size=4, s_x=1, s_y=.8, s_width=1.5, s_height=1,
filename="baseplot.png",
h_color="#FF62BC", h_fill="#A3A500")
library(temperatureresponse)
